name: Poetry with cache workflow on CI

on:
   workflow_dispatch:

jobs:
  install_dependencies:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        
      # Cache Poetry cache directory
      - name: Cache Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-cache-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-cache-
          
      # Install Poetry using pip
      - name: Install Poetry
        run: |
          pip install poetry
          echo "Poetry installed at:"
          which poetry
          poetry --version

      # Install dependencies using Poetry
      - name: Install dependencies with Poetry
        run: poetry install --no-root

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: |
          poetry run playwright install

      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.local  # Cache Python packages installed by Poetry
          key: ${{ runner.os }}-poetry-dependencies-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-dependencies-

      # Cache Poetry binary to reuse it in the next job
      - name: Cache Poetry binary
        uses: actions/cache@v3
        with:
          path: ~/.local/bin/poetry
          key: ${{ runner.os }}-poetry-bin-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-bin-

      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

  use_poetry_cache:
    needs: install_dependencies  # This makes sure this job runs after the previous one
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Restore Poetry binary cache
      - name: Restore Poetry binary cache
        uses: actions/cache@v3
        with:
          path: ~/.local/bin/poetry
          key: ${{ runner.os }}-poetry-bin-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-bin-

      # Restore Poetry cache
      - name: Restore Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-cache-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-cache-

      # Restore Python dependencies cache
      - name: Restore Python dependencies cache
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: ${{ runner.os }}-poetry-dependencies-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-dependencies-

      # Restore Playwright browsers cache
      - name: Restore Playwright browsers cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-

      # Check Poetry version (Poetry should now be available)
      - name: Check Poetry version
        run: poetry --version

      - name: Run the tests
        run: poetry run pytest automation/tests/login_page_dertails_test/login_page_test_info.py 
